# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

stages:
- stage: Build
  jobs:
  - job: Build
    displayName: 'Build with Go $(go_version)'
    strategy:
      matrix:
        go_1_13:
          go_version: '^1.13'
        go_1_14:
          go_version: '^1.14'
        go_1_15:
          go_version: '^1.15'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      GOBIN:  '$(GOPATH)/bin' # Go binaries path
      GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
      modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
    steps:
    - task: GoTool@0
      displayName: Install Go $(go_version)
      inputs:
        version: $(go_version)
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'
    - script: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
      workingDirectory: '$(modulePath)'
      displayName: Get dependencies
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          curl -sSL "https://github.com/gotestyourself/gotestsum/releases/download/v0.4.2/gotestsum_0.4.2_linux_amd64.tar.gz" | sudo tar -xz -C /usr/local/bin gotestsum
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.25.0
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
        workingDirectory: $(modulePath)
      displayName: 'Prepare build'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          make lint
        workingDirectory: $(modulePath)
      displayName: Lint
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          make build
        workingDirectory: $(modulePath)
      displayName: 'Build'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          make testext
        workingDirectory: $(modulePath)
      displayName: 'Tests & Coverage'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test-report.xml'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'coverage-report.xml'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(modulePath)/terraform-provider-databricks'
        artifact: 'gopack-$(go_version)'
        publishLocation: 'pipeline'
- stage: TestOnAzure
  dependsOn: Build
  displayName: Test on Azure
  jobs:
  - job: Deploy
    displayName: 'Trying to deploy from $(image_name)'
    strategy:
      matrix:
        windows:
          image_name: 'windows-latest'
        macos:
          image_name: 'macos-latest'
        ubuntu:
          image_name: 'ubuntu-latest'
    pool:
      vmImage: $(image_name)
    steps:
    - script: |
        echo "hello"
    - powershell: |
        gci env:
      displayName: Go setup debug
